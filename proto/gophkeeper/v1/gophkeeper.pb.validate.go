// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gophkeeper/v1/gophkeeper.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthRequestMultiError, or
// nil if none found.
func (m *AuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Password

	if len(errors) > 0 {
		return AuthRequestMultiError(errors)
	}

	return nil
}

// AuthRequestMultiError is an error wrapping multiple validation errors
// returned by AuthRequest.ValidateAll() if the designated constraints aren't met.
type AuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRequestMultiError) AllErrors() []error { return m }

// AuthRequestValidationError is the validation error returned by
// AuthRequest.Validate if the designated constraints aren't met.
type AuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequestValidationError) ErrorName() string { return "AuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequestValidationError{}

// Validate checks the field values on AuthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthResponseMultiError, or
// nil if none found.
func (m *AuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return AuthResponseMultiError(errors)
	}

	return nil
}

// AuthResponseMultiError is an error wrapping multiple validation errors
// returned by AuthResponse.ValidateAll() if the designated constraints aren't met.
type AuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResponseMultiError) AllErrors() []error { return m }

// AuthResponseValidationError is the validation error returned by
// AuthResponse.Validate if the designated constraints aren't met.
type AuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResponseValidationError) ErrorName() string { return "AuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResponseValidationError{}

// Validate checks the field values on Password with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Password) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Password with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PasswordMultiError, or nil
// if none found.
func (m *Password) ValidateAll() error {
	return m.validate(true)
}

func (m *Password) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Login

	// no validation rules for Password

	// no validation rules for Meta

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PasswordValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PasswordValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PasswordValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PasswordMultiError(errors)
	}

	return nil
}

// PasswordMultiError is an error wrapping multiple validation errors returned
// by Password.ValidateAll() if the designated constraints aren't met.
type PasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordMultiError) AllErrors() []error { return m }

// PasswordValidationError is the validation error returned by
// Password.Validate if the designated constraints aren't met.
type PasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordValidationError) ErrorName() string { return "PasswordValidationError" }

// Error satisfies the builtin error interface
func (e PasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordValidationError{}

// Validate checks the field values on CreatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePasswordRequestMultiError, or nil if none found.
func (m *CreatePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Login

	// no validation rules for Password

	// no validation rules for Meta

	if len(errors) > 0 {
		return CreatePasswordRequestMultiError(errors)
	}

	return nil
}

// CreatePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePasswordRequestMultiError) AllErrors() []error { return m }

// CreatePasswordRequestValidationError is the validation error returned by
// CreatePasswordRequest.Validate if the designated constraints aren't met.
type CreatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePasswordRequestValidationError) ErrorName() string {
	return "CreatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePasswordRequestValidationError{}

// Validate checks the field values on CreatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePasswordResponseMultiError, or nil if none found.
func (m *CreatePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePasswordResponseMultiError(errors)
	}

	return nil
}

// CreatePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePasswordResponseMultiError) AllErrors() []error { return m }

// CreatePasswordResponseValidationError is the validation error returned by
// CreatePasswordResponse.Validate if the designated constraints aren't met.
type CreatePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePasswordResponseValidationError) ErrorName() string {
	return "CreatePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePasswordResponseValidationError{}

// Validate checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordRequestMultiError, or nil if none found.
func (m *UpdatePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Login

	// no validation rules for Password

	// no validation rules for Meta

	if len(errors) > 0 {
		return UpdatePasswordRequestMultiError(errors)
	}

	return nil
}

// UpdatePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordRequestMultiError) AllErrors() []error { return m }

// UpdatePasswordRequestValidationError is the validation error returned by
// UpdatePasswordRequest.Validate if the designated constraints aren't met.
type UpdatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordRequestValidationError) ErrorName() string {
	return "UpdatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordRequestValidationError{}

// Validate checks the field values on UpdatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordResponseMultiError, or nil if none found.
func (m *UpdatePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdatePasswordResponseMultiError(errors)
	}

	return nil
}

// UpdatePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordResponseMultiError) AllErrors() []error { return m }

// UpdatePasswordResponseValidationError is the validation error returned by
// UpdatePasswordResponse.Validate if the designated constraints aren't met.
type UpdatePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordResponseValidationError) ErrorName() string {
	return "UpdatePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordResponseValidationError{}

// Validate checks the field values on GetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPasswordRequestMultiError, or nil if none found.
func (m *GetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPasswordRequestMultiError(errors)
	}

	return nil
}

// GetPasswordRequestMultiError is an error wrapping multiple validation errors
// returned by GetPasswordRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPasswordRequestMultiError) AllErrors() []error { return m }

// GetPasswordRequestValidationError is the validation error returned by
// GetPasswordRequest.Validate if the designated constraints aren't met.
type GetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordRequestValidationError) ErrorName() string {
	return "GetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordRequestValidationError{}

// Validate checks the field values on GetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPasswordResponseMultiError, or nil if none found.
func (m *GetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPasswordResponseValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPasswordResponseValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPasswordResponseValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPasswordResponseMultiError(errors)
	}

	return nil
}

// GetPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by GetPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPasswordResponseMultiError) AllErrors() []error { return m }

// GetPasswordResponseValidationError is the validation error returned by
// GetPasswordResponse.Validate if the designated constraints aren't met.
type GetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordResponseValidationError) ErrorName() string {
	return "GetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordResponseValidationError{}

// Validate checks the field values on GetPasswordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPasswordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPasswordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPasswordsRequestMultiError, or nil if none found.
func (m *GetPasswordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPasswordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPasswordsRequestMultiError(errors)
	}

	return nil
}

// GetPasswordsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPasswordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPasswordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPasswordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPasswordsRequestMultiError) AllErrors() []error { return m }

// GetPasswordsRequestValidationError is the validation error returned by
// GetPasswordsRequest.Validate if the designated constraints aren't met.
type GetPasswordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordsRequestValidationError) ErrorName() string {
	return "GetPasswordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordsRequestValidationError{}

// Validate checks the field values on GetPasswordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPasswordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPasswordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPasswordsResponseMultiError, or nil if none found.
func (m *GetPasswordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPasswordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPasswords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPasswordsResponseValidationError{
						field:  fmt.Sprintf("Passwords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPasswordsResponseValidationError{
						field:  fmt.Sprintf("Passwords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPasswordsResponseValidationError{
					field:  fmt.Sprintf("Passwords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPasswordsResponseMultiError(errors)
	}

	return nil
}

// GetPasswordsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPasswordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPasswordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPasswordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPasswordsResponseMultiError) AllErrors() []error { return m }

// GetPasswordsResponseValidationError is the validation error returned by
// GetPasswordsResponse.Validate if the designated constraints aren't met.
type GetPasswordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordsResponseValidationError) ErrorName() string {
	return "GetPasswordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordsResponseValidationError{}

// Validate checks the field values on DeletePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePasswordRequestMultiError, or nil if none found.
func (m *DeletePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePasswordRequestMultiError(errors)
	}

	return nil
}

// DeletePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePasswordRequestMultiError) AllErrors() []error { return m }

// DeletePasswordRequestValidationError is the validation error returned by
// DeletePasswordRequest.Validate if the designated constraints aren't met.
type DeletePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePasswordRequestValidationError) ErrorName() string {
	return "DeletePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePasswordRequestValidationError{}

// Validate checks the field values on DeletePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePasswordResponseMultiError, or nil if none found.
func (m *DeletePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePasswordResponseMultiError(errors)
	}

	return nil
}

// DeletePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePasswordResponseMultiError) AllErrors() []error { return m }

// DeletePasswordResponseValidationError is the validation error returned by
// DeletePasswordResponse.Validate if the designated constraints aren't met.
type DeletePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePasswordResponseValidationError) ErrorName() string {
	return "DeletePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePasswordResponseValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Meta

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on CreateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFileRequestMultiError, or nil if none found.
func (m *CreateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *CreateFileRequest_FileInfo:
		if v == nil {
			err := CreateFileRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFileInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFileRequestValidationError{
						field:  "FileInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFileRequestValidationError{
						field:  "FileInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFileRequestValidationError{
					field:  "FileInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateFileRequest_Content:
		if v == nil {
			err := CreateFileRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Content
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateFileRequestMultiError(errors)
	}

	return nil
}

// CreateFileRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileRequestMultiError) AllErrors() []error { return m }

// CreateFileRequestValidationError is the validation error returned by
// CreateFileRequest.Validate if the designated constraints aren't met.
type CreateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileRequestValidationError) ErrorName() string {
	return "CreateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileRequestValidationError{}

// Validate checks the field values on CreateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFileResponseMultiError, or nil if none found.
func (m *CreateFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateFileResponseMultiError(errors)
	}

	return nil
}

// CreateFileResponseMultiError is an error wrapping multiple validation errors
// returned by CreateFileResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileResponseMultiError) AllErrors() []error { return m }

// CreateFileResponseValidationError is the validation error returned by
// CreateFileResponse.Validate if the designated constraints aren't met.
type CreateFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileResponseValidationError) ErrorName() string {
	return "CreateFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileResponseValidationError{}

// Validate checks the field values on UpdateFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileRequestMultiError, or nil if none found.
func (m *UpdateFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *UpdateFileRequest_FileInfo:
		if v == nil {
			err := UpdateFileRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFileInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateFileRequestValidationError{
						field:  "FileInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateFileRequestValidationError{
						field:  "FileInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateFileRequestValidationError{
					field:  "FileInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateFileRequest_Content:
		if v == nil {
			err := UpdateFileRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Content
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateFileRequestMultiError(errors)
	}

	return nil
}

// UpdateFileRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateFileRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileRequestMultiError) AllErrors() []error { return m }

// UpdateFileRequestValidationError is the validation error returned by
// UpdateFileRequest.Validate if the designated constraints aren't met.
type UpdateFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileRequestValidationError) ErrorName() string {
	return "UpdateFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileRequestValidationError{}

// Validate checks the field values on UpdateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFileResponseMultiError, or nil if none found.
func (m *UpdateFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateFileResponseMultiError(errors)
	}

	return nil
}

// UpdateFileResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateFileResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFileResponseMultiError) AllErrors() []error { return m }

// UpdateFileResponseValidationError is the validation error returned by
// UpdateFileResponse.Validate if the designated constraints aren't met.
type UpdateFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFileResponseValidationError) ErrorName() string {
	return "UpdateFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFileResponseValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileResponseMultiError, or nil if none found.
func (m *GetFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *GetFileResponse_FileInfo:
		if v == nil {
			err := GetFileResponseValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFileInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFileResponseValidationError{
						field:  "FileInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFileResponseValidationError{
						field:  "FileInfo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileResponseValidationError{
					field:  "FileInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetFileResponse_Content:
		if v == nil {
			err := GetFileResponseValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Content
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetFileResponseMultiError(errors)
	}

	return nil
}

// GetFileResponseMultiError is an error wrapping multiple validation errors
// returned by GetFileResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileResponseMultiError) AllErrors() []error { return m }

// GetFileResponseValidationError is the validation error returned by
// GetFileResponse.Validate if the designated constraints aren't met.
type GetFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileResponseValidationError) ErrorName() string { return "GetFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileResponseValidationError{}

// Validate checks the field values on GetFilesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFilesRequestMultiError, or nil if none found.
func (m *GetFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFilesRequestMultiError(errors)
	}

	return nil
}

// GetFilesRequestMultiError is an error wrapping multiple validation errors
// returned by GetFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFilesRequestMultiError) AllErrors() []error { return m }

// GetFilesRequestValidationError is the validation error returned by
// GetFilesRequest.Validate if the designated constraints aren't met.
type GetFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFilesRequestValidationError) ErrorName() string { return "GetFilesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFilesRequestValidationError{}

// Validate checks the field values on GetFilesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFilesResponseMultiError, or nil if none found.
func (m *GetFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFileInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFilesResponseValidationError{
						field:  fmt.Sprintf("FileInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFilesResponseValidationError{
						field:  fmt.Sprintf("FileInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFilesResponseValidationError{
					field:  fmt.Sprintf("FileInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFilesResponseMultiError(errors)
	}

	return nil
}

// GetFilesResponseMultiError is an error wrapping multiple validation errors
// returned by GetFilesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFilesResponseMultiError) AllErrors() []error { return m }

// GetFilesResponseValidationError is the validation error returned by
// GetFilesResponse.Validate if the designated constraints aren't met.
type GetFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFilesResponseValidationError) ErrorName() string { return "GetFilesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFilesResponseValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileResponseMultiError, or nil if none found.
func (m *DeleteFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFileResponseMultiError(errors)
	}

	return nil
}

// DeleteFileResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFileResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileResponseMultiError) AllErrors() []error { return m }

// DeleteFileResponseValidationError is the validation error returned by
// DeleteFileResponse.Validate if the designated constraints aren't met.
type DeleteFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileResponseValidationError) ErrorName() string {
	return "DeleteFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileResponseValidationError{}

// Validate checks the field values on Bank with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bank) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bank with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BankMultiError, or nil if none found.
func (m *Bank) ValidateAll() error {
	return m.validate(true)
}

func (m *Bank) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CardNumber

	// no validation rules for Cvc

	// no validation rules for Owner

	// no validation rules for Exp

	// no validation rules for Meta

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BankMultiError(errors)
	}

	return nil
}

// BankMultiError is an error wrapping multiple validation errors returned by
// Bank.ValidateAll() if the designated constraints aren't met.
type BankMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankMultiError) AllErrors() []error { return m }

// BankValidationError is the validation error returned by Bank.Validate if the
// designated constraints aren't met.
type BankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankValidationError) ErrorName() string { return "BankValidationError" }

// Error satisfies the builtin error interface
func (e BankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankValidationError{}

// Validate checks the field values on CreateBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBankRequestMultiError, or nil if none found.
func (m *CreateBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CardNumber

	// no validation rules for Cvc

	// no validation rules for Owner

	// no validation rules for Exp

	// no validation rules for Meta

	if len(errors) > 0 {
		return CreateBankRequestMultiError(errors)
	}

	return nil
}

// CreateBankRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBankRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBankRequestMultiError) AllErrors() []error { return m }

// CreateBankRequestValidationError is the validation error returned by
// CreateBankRequest.Validate if the designated constraints aren't met.
type CreateBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBankRequestValidationError) ErrorName() string {
	return "CreateBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBankRequestValidationError{}

// Validate checks the field values on CreateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBankResponseMultiError, or nil if none found.
func (m *CreateBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateBankResponseMultiError(errors)
	}

	return nil
}

// CreateBankResponseMultiError is an error wrapping multiple validation errors
// returned by CreateBankResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBankResponseMultiError) AllErrors() []error { return m }

// CreateBankResponseValidationError is the validation error returned by
// CreateBankResponse.Validate if the designated constraints aren't met.
type CreateBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBankResponseValidationError) ErrorName() string {
	return "CreateBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBankResponseValidationError{}

// Validate checks the field values on UpdateBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankRequestMultiError, or nil if none found.
func (m *UpdateBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CardNumber

	// no validation rules for Cvc

	// no validation rules for Owner

	// no validation rules for Exp

	// no validation rules for Meta

	if len(errors) > 0 {
		return UpdateBankRequestMultiError(errors)
	}

	return nil
}

// UpdateBankRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBankRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankRequestMultiError) AllErrors() []error { return m }

// UpdateBankRequestValidationError is the validation error returned by
// UpdateBankRequest.Validate if the designated constraints aren't met.
type UpdateBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankRequestValidationError) ErrorName() string {
	return "UpdateBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankRequestValidationError{}

// Validate checks the field values on UpdateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankResponseMultiError, or nil if none found.
func (m *UpdateBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateBankResponseMultiError(errors)
	}

	return nil
}

// UpdateBankResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateBankResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankResponseMultiError) AllErrors() []error { return m }

// UpdateBankResponseValidationError is the validation error returned by
// UpdateBankResponse.Validate if the designated constraints aren't met.
type UpdateBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankResponseValidationError) ErrorName() string {
	return "UpdateBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankResponseValidationError{}

// Validate checks the field values on GetBankRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBankRequestMultiError,
// or nil if none found.
func (m *GetBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBankRequestMultiError(errors)
	}

	return nil
}

// GetBankRequestMultiError is an error wrapping multiple validation errors
// returned by GetBankRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankRequestMultiError) AllErrors() []error { return m }

// GetBankRequestValidationError is the validation error returned by
// GetBankRequest.Validate if the designated constraints aren't met.
type GetBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankRequestValidationError) ErrorName() string { return "GetBankRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankRequestValidationError{}

// Validate checks the field values on GetBankResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankResponseMultiError, or nil if none found.
func (m *GetBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBank()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBankResponseValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBankResponseValidationError{
					field:  "Bank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBank()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBankResponseValidationError{
				field:  "Bank",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBankResponseMultiError(errors)
	}

	return nil
}

// GetBankResponseMultiError is an error wrapping multiple validation errors
// returned by GetBankResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankResponseMultiError) AllErrors() []error { return m }

// GetBankResponseValidationError is the validation error returned by
// GetBankResponse.Validate if the designated constraints aren't met.
type GetBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankResponseValidationError) ErrorName() string { return "GetBankResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankResponseValidationError{}

// Validate checks the field values on GetBanksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBanksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBanksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBanksRequestMultiError, or nil if none found.
func (m *GetBanksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBanksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBanksRequestMultiError(errors)
	}

	return nil
}

// GetBanksRequestMultiError is an error wrapping multiple validation errors
// returned by GetBanksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBanksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBanksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBanksRequestMultiError) AllErrors() []error { return m }

// GetBanksRequestValidationError is the validation error returned by
// GetBanksRequest.Validate if the designated constraints aren't met.
type GetBanksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksRequestValidationError) ErrorName() string { return "GetBanksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBanksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksRequestValidationError{}

// Validate checks the field values on GetBanksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBanksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBanksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBanksResponseMultiError, or nil if none found.
func (m *GetBanksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBanksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBanks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBanksResponseValidationError{
						field:  fmt.Sprintf("Banks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBanksResponseValidationError{
					field:  fmt.Sprintf("Banks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBanksResponseMultiError(errors)
	}

	return nil
}

// GetBanksResponseMultiError is an error wrapping multiple validation errors
// returned by GetBanksResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBanksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBanksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBanksResponseMultiError) AllErrors() []error { return m }

// GetBanksResponseValidationError is the validation error returned by
// GetBanksResponse.Validate if the designated constraints aren't met.
type GetBanksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanksResponseValidationError) ErrorName() string { return "GetBanksResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBanksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanksResponseValidationError{}

// Validate checks the field values on DeleteBankRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBankRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBankRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBankRequestMultiError, or nil if none found.
func (m *DeleteBankRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBankRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBankRequestMultiError(errors)
	}

	return nil
}

// DeleteBankRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBankRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBankRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBankRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBankRequestMultiError) AllErrors() []error { return m }

// DeleteBankRequestValidationError is the validation error returned by
// DeleteBankRequest.Validate if the designated constraints aren't met.
type DeleteBankRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBankRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBankRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBankRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBankRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBankRequestValidationError) ErrorName() string {
	return "DeleteBankRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBankRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBankRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBankRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBankRequestValidationError{}

// Validate checks the field values on DeleteBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBankResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBankResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBankResponseMultiError, or nil if none found.
func (m *DeleteBankResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBankResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBankResponseMultiError(errors)
	}

	return nil
}

// DeleteBankResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteBankResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteBankResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBankResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBankResponseMultiError) AllErrors() []error { return m }

// DeleteBankResponseValidationError is the validation error returned by
// DeleteBankResponse.Validate if the designated constraints aren't met.
type DeleteBankResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBankResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBankResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBankResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBankResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBankResponseValidationError) ErrorName() string {
	return "DeleteBankResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBankResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBankResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBankResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBankResponseValidationError{}

// Validate checks the field values on Text with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Text) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Text with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TextMultiError, or nil if none found.
func (m *Text) ValidateAll() error {
	return m.validate(true)
}

func (m *Text) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Text

	// no validation rules for Meta

	if all {
		switch v := interface{}(m.GetUpdateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TextValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TextValidationError{
					field:  "UpdateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TextValidationError{
				field:  "UpdateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TextMultiError(errors)
	}

	return nil
}

// TextMultiError is an error wrapping multiple validation errors returned by
// Text.ValidateAll() if the designated constraints aren't met.
type TextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextMultiError) AllErrors() []error { return m }

// TextValidationError is the validation error returned by Text.Validate if the
// designated constraints aren't met.
type TextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextValidationError) ErrorName() string { return "TextValidationError" }

// Error satisfies the builtin error interface
func (e TextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextValidationError{}

// Validate checks the field values on CreateTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTextRequestMultiError, or nil if none found.
func (m *CreateTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Text

	// no validation rules for Meta

	if len(errors) > 0 {
		return CreateTextRequestMultiError(errors)
	}

	return nil
}

// CreateTextRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTextRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTextRequestMultiError) AllErrors() []error { return m }

// CreateTextRequestValidationError is the validation error returned by
// CreateTextRequest.Validate if the designated constraints aren't met.
type CreateTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTextRequestValidationError) ErrorName() string {
	return "CreateTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTextRequestValidationError{}

// Validate checks the field values on CreateTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTextResponseMultiError, or nil if none found.
func (m *CreateTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTextResponseMultiError(errors)
	}

	return nil
}

// CreateTextResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTextResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTextResponseMultiError) AllErrors() []error { return m }

// CreateTextResponseValidationError is the validation error returned by
// CreateTextResponse.Validate if the designated constraints aren't met.
type CreateTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTextResponseValidationError) ErrorName() string {
	return "CreateTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTextResponseValidationError{}

// Validate checks the field values on UpdateTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTextRequestMultiError, or nil if none found.
func (m *UpdateTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Text

	// no validation rules for Meta

	if len(errors) > 0 {
		return UpdateTextRequestMultiError(errors)
	}

	return nil
}

// UpdateTextRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTextRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTextRequestMultiError) AllErrors() []error { return m }

// UpdateTextRequestValidationError is the validation error returned by
// UpdateTextRequest.Validate if the designated constraints aren't met.
type UpdateTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTextRequestValidationError) ErrorName() string {
	return "UpdateTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTextRequestValidationError{}

// Validate checks the field values on UpdateTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTextResponseMultiError, or nil if none found.
func (m *UpdateTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateTextResponseMultiError(errors)
	}

	return nil
}

// UpdateTextResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTextResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTextResponseMultiError) AllErrors() []error { return m }

// UpdateTextResponseValidationError is the validation error returned by
// UpdateTextResponse.Validate if the designated constraints aren't met.
type UpdateTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTextResponseValidationError) ErrorName() string {
	return "UpdateTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTextResponseValidationError{}

// Validate checks the field values on GetTextRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTextRequestMultiError,
// or nil if none found.
func (m *GetTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTextRequestMultiError(errors)
	}

	return nil
}

// GetTextRequestMultiError is an error wrapping multiple validation errors
// returned by GetTextRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextRequestMultiError) AllErrors() []error { return m }

// GetTextRequestValidationError is the validation error returned by
// GetTextRequest.Validate if the designated constraints aren't met.
type GetTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextRequestValidationError) ErrorName() string { return "GetTextRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextRequestValidationError{}

// Validate checks the field values on GetTextResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTextResponseMultiError, or nil if none found.
func (m *GetTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTextResponseValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTextResponseValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTextResponseValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTextResponseMultiError(errors)
	}

	return nil
}

// GetTextResponseMultiError is an error wrapping multiple validation errors
// returned by GetTextResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextResponseMultiError) AllErrors() []error { return m }

// GetTextResponseValidationError is the validation error returned by
// GetTextResponse.Validate if the designated constraints aren't met.
type GetTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextResponseValidationError) ErrorName() string { return "GetTextResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextResponseValidationError{}

// Validate checks the field values on GetTextsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTextsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTextsRequestMultiError, or nil if none found.
func (m *GetTextsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTextsRequestMultiError(errors)
	}

	return nil
}

// GetTextsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTextsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTextsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextsRequestMultiError) AllErrors() []error { return m }

// GetTextsRequestValidationError is the validation error returned by
// GetTextsRequest.Validate if the designated constraints aren't met.
type GetTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextsRequestValidationError) ErrorName() string { return "GetTextsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextsRequestValidationError{}

// Validate checks the field values on GetTextsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTextsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTextsResponseMultiError, or nil if none found.
func (m *GetTextsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTexts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTextsResponseValidationError{
						field:  fmt.Sprintf("Texts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTextsResponseValidationError{
						field:  fmt.Sprintf("Texts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTextsResponseValidationError{
					field:  fmt.Sprintf("Texts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTextsResponseMultiError(errors)
	}

	return nil
}

// GetTextsResponseMultiError is an error wrapping multiple validation errors
// returned by GetTextsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTextsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextsResponseMultiError) AllErrors() []error { return m }

// GetTextsResponseValidationError is the validation error returned by
// GetTextsResponse.Validate if the designated constraints aren't met.
type GetTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextsResponseValidationError) ErrorName() string { return "GetTextsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextsResponseValidationError{}

// Validate checks the field values on DeleteTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTextRequestMultiError, or nil if none found.
func (m *DeleteTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTextRequestMultiError(errors)
	}

	return nil
}

// DeleteTextRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTextRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTextRequestMultiError) AllErrors() []error { return m }

// DeleteTextRequestValidationError is the validation error returned by
// DeleteTextRequest.Validate if the designated constraints aren't met.
type DeleteTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTextRequestValidationError) ErrorName() string {
	return "DeleteTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTextRequestValidationError{}

// Validate checks the field values on DeleteTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTextResponseMultiError, or nil if none found.
func (m *DeleteTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTextResponseMultiError(errors)
	}

	return nil
}

// DeleteTextResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTextResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTextResponseMultiError) AllErrors() []error { return m }

// DeleteTextResponseValidationError is the validation error returned by
// DeleteTextResponse.Validate if the designated constraints aren't met.
type DeleteTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTextResponseValidationError) ErrorName() string {
	return "DeleteTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTextResponseValidationError{}

// Validate checks the field values on GetChunkSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChunkSizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChunkSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChunkSizeRequestMultiError, or nil if none found.
func (m *GetChunkSizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChunkSizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetChunkSizeRequestMultiError(errors)
	}

	return nil
}

// GetChunkSizeRequestMultiError is an error wrapping multiple validation
// errors returned by GetChunkSizeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChunkSizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChunkSizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChunkSizeRequestMultiError) AllErrors() []error { return m }

// GetChunkSizeRequestValidationError is the validation error returned by
// GetChunkSizeRequest.Validate if the designated constraints aren't met.
type GetChunkSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChunkSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChunkSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChunkSizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChunkSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChunkSizeRequestValidationError) ErrorName() string {
	return "GetChunkSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChunkSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChunkSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChunkSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChunkSizeRequestValidationError{}

// Validate checks the field values on GetChunkSizeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChunkSizeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChunkSizeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChunkSizeResponseMultiError, or nil if none found.
func (m *GetChunkSizeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChunkSizeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	if len(errors) > 0 {
		return GetChunkSizeResponseMultiError(errors)
	}

	return nil
}

// GetChunkSizeResponseMultiError is an error wrapping multiple validation
// errors returned by GetChunkSizeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetChunkSizeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChunkSizeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChunkSizeResponseMultiError) AllErrors() []error { return m }

// GetChunkSizeResponseValidationError is the validation error returned by
// GetChunkSizeResponse.Validate if the designated constraints aren't met.
type GetChunkSizeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChunkSizeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChunkSizeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChunkSizeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChunkSizeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChunkSizeResponseValidationError) ErrorName() string {
	return "GetChunkSizeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChunkSizeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChunkSizeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChunkSizeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChunkSizeResponseValidationError{}
